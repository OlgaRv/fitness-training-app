import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fitness_book/ui/admin_screens/components/datetime_dropdown.dart';
import 'package:fitness_book/ui/admin_screens/components/status_dropdown.dart';
import 'package:fitness_book/ui/admin_screens/components/textfield_description.dart';
import 'package:fitness_book/ui/admin_screens/components/trainer_dropdown.dart';
import 'package:flutter/material.dart';
import 'components/specialization_dropdown.dart';

class CreateWorkoutScreen extends StatefulWidget {
  const CreateWorkoutScreen({super.key});

  @override
  State<CreateWorkoutScreen> createState() => _CreateWorkoutScreenState();
}

class _CreateWorkoutScreenState extends State<CreateWorkoutScreen> {
  final _formKey = GlobalKey<FormState>();
  final _firestore = FirebaseFirestore.instance;
  final numberPlacesController = TextEditingController();
  // –£–±–∏—Ä–∞–µ–º numberMembersController - —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

  bool _isLoading = false;

  String? _selectedTrainingTypeId;
  String? _selectedDatetimeId;
  String? _selectedTrainerId;
  String? _selectedStatusId;

  // –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
  String? _validateNumber(String? value) {
    if (value == null || value.trim().isEmpty) {
      return '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç';
    }
    final number = int.tryParse(value.trim());
    if (number == null || number <= 0) {
      return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ 0)';
    }
    return null;
  }

  Future<void> _saveWorkout() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º id
      final trainingTypeDoc = _selectedTrainingTypeId != null
          ? await _firestore
                .collection('training_types')
                .doc(_selectedTrainingTypeId)
                .get()
          : null;

      final trainerDoc = _selectedTrainerId != null
          ? await _firestore
                .collection('trainers')
                .doc(_selectedTrainerId)
                .get()
          : null;

      final datetimeDoc = _selectedDatetimeId != null
          ? await _firestore
                .collection('datetimes')
                .doc(_selectedDatetimeId)
                .get()
          : null;

      final statusDoc = _selectedStatusId != null
          ? await _firestore.collection('statuses').doc(_selectedStatusId).get()
          : null;

      if (trainingTypeDoc == null ||
          !trainingTypeDoc.exists ||
          trainerDoc == null ||
          !trainerDoc.exists ||
          datetimeDoc == null ||
          !datetimeDoc.exists ||
          statusDoc == null ||
          !statusDoc.exists) {
        _showErrorSnackBar('–í—ã–±—Ä–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
        setState(() => _isLoading = false);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ scheduled_workouts —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      await _firestore.collection('scheduled_workouts').add({
        'type': {
          'id': trainingTypeDoc.id,
          'name': trainingTypeDoc.get('name'),
          'description': trainingTypeDoc.get('description'),
          'duration': trainingTypeDoc.get('duration'),
        },
        'trainer': {
          'id': trainerDoc.id,
          'name': trainerDoc.get('trainerName'),
          'specializations': trainerDoc.get('specializations'),
          'rating': trainerDoc.get('rating'),
        },
        'datetime': datetimeDoc.get('datetime'),
        'status': {'id': statusDoc.id, 'name': statusDoc.get('status')},
        'countPlaces': int.parse(numberPlacesController.text),

        // üîπ –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        'countMembers': 0, // –Ω–∞—á–∏–Ω–∞–µ–º —Å 0 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        'bookedUsers': [], // –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(), // –¥–æ–±–∞–≤–ª—è–µ–º updatedAt
      });

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!'),
            backgroundColor: Theme.of(context).colorScheme.primary,
          ),
        );
        Navigator.pushReplacementNamed(context, '/manage_schedule');
      }
    } catch (e) {
      _showErrorSnackBar('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e');
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  void _showErrorSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Theme.of(context).colorScheme.error,
        ),
      );
    }
  }

  @override
  void dispose() {
    numberPlacesController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
        title: const Text('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              SpecializationDropdown(
                title: '–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                selectedValue: _selectedTrainingTypeId,
                onChanged: (val) =>
                    setState(() => _selectedTrainingTypeId = val),
                validator: (val) =>
                    val == null ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' : null,
              ),

              DatetimeDropdown(
                title: '–î–∞—Ç–∞, –≤—Ä–µ–º—è',
                selectedValue: _selectedDatetimeId,
                onChanged: (val) => setState(() => _selectedDatetimeId = val),
                validator: (val) =>
                    val == null ? '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è' : null,
              ),

              TrainerDropdown(
                title: '–¢—Ä–µ–Ω–µ—Ä',
                selectedValue: _selectedTrainerId,
                onChanged: (val) => setState(() => _selectedTrainerId = val),
                validator: (val) => val == null ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞' : null,
              ),

              StatusDropdown(
                title: '–°—Ç–∞—Ç—É—Å',
                selectedValue: _selectedStatusId,
                onChanged: (val) => setState(() => _selectedStatusId = val),
                validator: (val) => val == null ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å' : null,
              ),

              // üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
              if (_selectedTrainingTypeId != null)
                FutureBuilder<DocumentSnapshot>(
                  future: _firestore
                      .collection('training_types')
                      .doc(_selectedTrainingTypeId)
                      .get(),
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return const Center(
                        child: Padding(
                          padding: EdgeInsets.all(8.0),
                          child: CircularProgressIndicator(),
                        ),
                      );
                    }
                    if (!snapshot.hasData || !snapshot.data!.exists) {
                      return const SizedBox.shrink();
                    }

                    final data = snapshot.data!.data() as Map<String, dynamic>;
                    final duration = data['duration']?.toString() ?? '-';
                    final description = data['description'] ?? '-';

                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        TextfieldDescription(
                          title: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã)",
                          hittext: duration,
                          controller: TextEditingController(text: duration),
                          isTextArea: false,
                        ),
                        TextfieldDescription(
                          title: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                          hittext: description,
                          controller: TextEditingController(text: description),
                          isTextArea: true,
                        ),
                      ],
                    );
                  },
                ),

              TextfieldDescription(
                title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç',
                hittext: '5',
                controller: numberPlacesController,
                validator: _validateNumber,
              ),

              // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" - –æ–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
              const SizedBox(height: 16),
              SizedBox(
                height: 50,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _saveWorkout,
                  child: _isLoading
                      ? const CircularProgressIndicator(
                          valueColor: AlwaysStoppedAnimation<Color>(
                            Colors.white,
                          ),
                        )
                      : const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
